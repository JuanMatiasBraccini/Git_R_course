---
title: "Part X. General stats"
output: 
  html_document:
    code_folding: show
    highlight: haddock
    keep_md: yes
    theme: united
---

<style type="text/css">
h1.title {
  font-size: 30px;
    color: Maroon;
  text-align: center;
          }
h3.subtitle {
  font-size: 22px;
    color: Maroon;
  text-align: center;
            }
h4.author { 
    font-size: 24px;
      color: FireBrick;
  text-align: center;
          }
h4.date { 
  font-size: 18px;
  text-align: center;
        }
h1{
  font-size: 22px;
  color: DarkBlue;
  }
h2{
  font-size: 20px;
  color: Blue;
  }
h3{
  font-size: 18px;
  color: SteelBlue;
  }
body{
    font-family: Helvetica;
    font-size: 14pt;
    }
code.r{
  font-size: 16pt;
      }
pre {
  font-size: 16pt;
}
</style>


```{r globaloptions, include=FALSE}
knitr::opts_chunk$set(fig.width = 6,fig.height = 6,
                        echo = TRUE, warning=FALSE,message=FALSE)
```

# Lesson goals
We're going to apply a range of general statistical analyses to real case examples
Credits to John Hoenig

<br><br>

# 1. Lemon shark tagging
```{r}

# 1. Construct a 2x2 table with the first row being the number of male 
#    sharks tagged and recaptured and the second row being the number
#    of females tagged and recaptured
sex.ratio <- matrix(c(59,4,52,17),nrow=2,byrow=T,
             dimnames=list(sex=c("male","female"),
                           capture=c("tag","recap")))
sex.ratio
fisher.test(sex.ratio)    
# NOTE: the small p-value indicates that the 
#       sex ratio of tagged sharks is statistically significantly 
#       different from that of recaptured sharks. 
#      (what is the importance of this?)

```
## Now let's look at the lack of independence graphically.
```{r}
par(mfrow=c(1,1))
mosaicplot(sex.ratio)

```

+ If recapture probability is independent of sex then we should expect
  to see the two horizontal line segments be a single horizontal line.
+ Instead we see the two line segments are at different heights 
  indicating lack of independence. 


## Alternatively and equivalently, we could ask if the sex ratio is the same for tagged and recaptured animals.
We'd show this graphically by making the mosaic plot for the transpose of the data.
```{r}
par(mfrow=c(1,2))
# compare recapture probability between sexes
mosaicplot(sex.ratio)
# compare sex ratios between tagged and recaptured groups
mosaicplot(t(sex.ratio))

# An alternative to the Fisher exact test is the regular
# chi-square test which can be done using
chisq.test(sex.ratio,simulate.p.value=T)
fisher.test(sex.ratio) 
# Note that the two tests give very similar p-values

```
## Now suppose we want to test whether the average movement of males is significantly different from that of females. 
We can use a t-test

```{r}
male.move = c(1,2,3,4,5)        # fake data 
female.move = c(3,4,5,6)        # fake data
t.test(male.move,female.move)
# Note the degrees of freedom is 6.981, which is
    # close to but not exactly 7.
```
<br><br>

# 2. Length-converted catch curves
Length-converted catch curves are described in Pauly (1984). The idea is that
if you plot the log of the number in each size category versus the
corresponding relative age, the slope of the descending right limb of the
curve can be used to get an estimate of the total instantaneous mortality rate.

These data are for banded grouper (<em>Epinephelus sexfasciatus</em>) from the
Philippines. A number of samples from throughout the year were pooled to
get a representative picture of the size structure of the population.

```{r}
# midpoints of length classes (in cm)
leng.classes = seq(5,27,2)  
leng.classes
# number caught in each length category
numbers = c(5,29,114,162,143,118,61,50,32,17,4,4) 
numbers                                           
#check whether the number of size observations equals the
#   number of size classes   (Yes, each vector is of length 12)
length(leng.classes) 
length(numbers)     

```

## Do a preliminary plot
```{r}
plot(leng.classes,log(numbers))  #nothing looks suspicious
```

## We need the following information to convert length to relative age
* Linf = Linfinity (asymptotic length) = 30.9
* K = von Bertalanffy growth coefficient = .51

note: Relative age differs from true age by a constant. 
That is, true age = relative age + To where To is a
 parameter of the von Bertalanffy growth equation. 
 (We don't need To in order to estimate Z.)
```{r}
 Linf = 30.9
 K = .51
 # relative age at the center of each length class
 relage = -log(1 - leng.classes/Linf)/K  
 relage
 plot(relage,log(numbers),typ="b",
      xlab="relative age, yrs",
      ylab="log(number)")

 #Regress log(numbers) on relative age
 catch.curve = lm(log(numbers[5:12])~relage[5:12]) 
 #Note: we exclude vales on the ascending (left) limb
 abline(catch.curve)   # add a regression line to the existing plot
 catch.curve           # look at the regression output.
# Note the slope is -1.322. We obtain an estimate of Z from the slope 
#  by adding K to the absolute value of the slope
 
 Z = K + abs(-1.322)
 Z
```
 
## Is the last datapoint on the right very influential?

```{r} 
#Refit everything after omitting the 12th (last) datapoint
catch.curvenew = lm(log(numbers[5:11])~relage[5:11])
catch.curvenew
Z = K + abs(catch.curvenew$coefficients[2])
Z
# yes, that last datapoint is somewhat influential
#  ..deleting it causes the estimate of Z to go up 
#  from 1.83 to 2.07
100*(2.07-1.83)/1.83
# Deleting the last datapoint increased the estimate of Z by 13%,
# ...not such a big deal.
```